// <auto-generated />
using System;
using LootManagerApi.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LootManagerApi.Migrations
{
    [DbContext(typeof(LootManagerContext))]
    [Migration("20230320135629_ElementLocationJoin")]
    partial class ElementLocationJoin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LocationUser", b =>
                {
                    b.Property<int>("LocationsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("LocationsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("LocationUser");
                });

            modelBuilder.Entity("LootManagerApi.Entities.Element", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElementLocationId")
                        .HasColumnType("int");

                    b.Property<string>("LocationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Elements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description of the element",
                            ElementLocationId = 0,
                            LocationAddress = "Location undifined",
                            Name = "element1",
                            Type = "Type undefined ",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description of the element",
                            ElementLocationId = 0,
                            LocationAddress = "Location undifined",
                            Name = "element2",
                            Type = "Type undefined ",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description of the element",
                            ElementLocationId = 0,
                            LocationAddress = "Location undifined",
                            Name = "element3",
                            Type = "Type undefined ",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description of the element",
                            ElementLocationId = 0,
                            LocationAddress = "Location undifined",
                            Name = "element4",
                            Type = "Type undefined ",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description of the element",
                            ElementLocationId = 0,
                            LocationAddress = "Location undifined",
                            Name = "element5",
                            Type = "Type undefined ",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.ElementLocation", b =>
                {
                    b.Property<int>("ElementId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("ElementId");

                    b.HasIndex("LocationId");

                    b.ToTable("ElementsLocations");
                });

            modelBuilder.Entity("LootManagerApi.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Furniture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("House")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shelf")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Furniture = "Furniture1",
                            House = "House1",
                            Position = 1,
                            Room = "Room1",
                            Shelf = "First Shelf"
                        },
                        new
                        {
                            Id = 2,
                            Furniture = "Furniture1",
                            House = "House2",
                            Position = 1,
                            Room = "Room1",
                            Shelf = "First Shelf"
                        },
                        new
                        {
                            Id = 3,
                            Furniture = "Furniture1",
                            House = "House3",
                            Position = 1,
                            Room = "Room1",
                            Shelf = "First Shelf"
                        },
                        new
                        {
                            Id = 4,
                            Furniture = "Furniture1",
                            House = "House4",
                            Position = 1,
                            Room = "Room1",
                            Shelf = "First Shelf"
                        },
                        new
                        {
                            Id = 5,
                            Furniture = "Furniture1",
                            House = "House5",
                            Position = 1,
                            Room = "Room1",
                            Shelf = "First Shelf"
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 3, 20, 13, 56, 28, 492, DateTimeKind.Utc).AddTicks(9168),
                            Email = "test@test.com",
                            FullName = "test",
                            PasswordHash = "$2a$11$h9/FuPDuHQ.Vp38vaMtoX.ml5Zp7gmV1a1DSXBp5n9cSdS7rPijai"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 3, 20, 13, 56, 28, 670, DateTimeKind.Utc).AddTicks(6680),
                            Email = "jerry@aol.com",
                            FullName = "Jerry Seinfeld",
                            PasswordHash = "$2a$11$z9Wwan6wvahlifjzAEnqv.6uVnDoWGs2UG0znw2F6SbgmwUz7NXCu"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 3, 20, 13, 56, 28, 854, DateTimeKind.Utc).AddTicks(6266),
                            Email = "George.Costanza@aol.com",
                            FullName = "George Costanza",
                            PasswordHash = "$2a$11$fZM5eA7sEp8LVsHq/xngw.asq/KLx2.dJOHrlHTNCCQxyhtWjjcbq"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 3, 20, 13, 56, 29, 46, DateTimeKind.Utc).AddTicks(7216),
                            Email = "Elaine.Benes@aol.com",
                            FullName = "Elaine Benes",
                            PasswordHash = "$2a$11$28fFidvCG7vcvPThQYleSeyiLlM03uxMABths2ogy9NR0wk89p7.e"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 3, 20, 13, 56, 29, 210, DateTimeKind.Utc).AddTicks(8190),
                            Email = "Cosmo.Kramer@aol.com",
                            FullName = "Cosmo Kramer",
                            PasswordHash = "$2a$11$DW/EuAKm95kEpkQJpMwfS.ZOrguuww4OY.ffruGpCp.2t.YF8nA7y"
                        });
                });

            modelBuilder.Entity("LocationUser", b =>
                {
                    b.HasOne("LootManagerApi.Entities.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LootManagerApi.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LootManagerApi.Entities.Element", b =>
                {
                    b.HasOne("LootManagerApi.Entities.User", "User")
                        .WithMany("Elements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootManagerApi.Entities.ElementLocation", b =>
                {
                    b.HasOne("LootManagerApi.Entities.Element", "Element")
                        .WithOne("ElementLocation")
                        .HasForeignKey("LootManagerApi.Entities.ElementLocation", "ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LootManagerApi.Entities.Location", "Location")
                        .WithMany("ElementLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("LootManagerApi.Entities.Element", b =>
                {
                    b.Navigation("ElementLocation");
                });

            modelBuilder.Entity("LootManagerApi.Entities.Location", b =>
                {
                    b.Navigation("ElementLocations");
                });

            modelBuilder.Entity("LootManagerApi.Entities.User", b =>
                {
                    b.Navigation("Elements");
                });
#pragma warning restore 612, 618
        }
    }
}
