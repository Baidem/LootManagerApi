// <auto-generated />
using System;
using LootManagerApi.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LootManagerApi.Migrations
{
    [DbContext(typeof(LootManagerContext))]
    [Migration("20230421095629_TraceabilityProperties")]
    partial class TraceabilityProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ElementImage", b =>
                {
                    b.Property<int>("ElementsId")
                        .HasColumnType("int");

                    b.Property<int>("ImagesId")
                        .HasColumnType("int");

                    b.HasKey("ElementsId", "ImagesId");

                    b.HasIndex("ImagesId");

                    b.ToTable("ElementImage");
                });

            modelBuilder.Entity("ImageInfoSheet", b =>
                {
                    b.Property<int>("ImagesId")
                        .HasColumnType("int");

                    b.Property<int>("InfoSheetsId")
                        .HasColumnType("int");

                    b.HasKey("ImagesId", "InfoSheetsId");

                    b.HasIndex("InfoSheetsId");

                    b.ToTable("ImageInfoSheet");
                });

            modelBuilder.Entity("LootManagerApi.Entities.Element", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InfoSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InfoSheetId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Elements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4965),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 1,
                            LocationId = 1,
                            Name = "Admin Fig",
                            Type = "Figurine",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4968),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 1,
                            LocationId = 2,
                            Name = "User Fig",
                            Type = "Figurine",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4970),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 1,
                            LocationId = 3,
                            Name = "Cont Fig",
                            Type = "Figurine",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4972),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 2,
                            LocationId = 1,
                            Name = "Admin Manga",
                            Type = "Manga",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4973),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 2,
                            LocationId = 2,
                            Name = "User Manga",
                            Type = "Manga",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(5108),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 2,
                            LocationId = 3,
                            Name = "Cont Manga3",
                            Type = "Manga",
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(5109),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 3,
                            LocationId = 1,
                            Name = "Admin Comic",
                            Type = "Comic",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(5111),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 3,
                            LocationId = 2,
                            Name = "User Comic",
                            Type = "Comic",
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(5112),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 3,
                            LocationId = 3,
                            Name = "Cont Comic",
                            Type = "Comic",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("LootManagerApi.Entities.InfoSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WikiArticle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("InfoSheets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorSignature = "The Contributor",
                            BarCode = "3 037920 02133 1",
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4902),
                            Designation = "Figurine",
                            Reference = "Fig-ref_01",
                            UserId = 3,
                            WikiArticle = "Small statue depicting a popular culture character."
                        },
                        new
                        {
                            Id = 2,
                            AuthorSignature = "The Contributor",
                            BarCode = "3 037920 02133 1",
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4906),
                            Designation = "Manga",
                            Reference = "Man-ref_01",
                            UserId = 3,
                            WikiArticle = "Japanese comic book."
                        },
                        new
                        {
                            Id = 3,
                            AuthorSignature = "The Contributor",
                            BarCode = "3 037920 02133 1",
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4907),
                            Designation = "Comic",
                            Reference = "Com-ref_01",
                            UserId = 3,
                            WikiArticle = "Illustrated story in a book or magazine format, often featuring superheroes or humor."
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 42, DateTimeKind.Utc).AddTicks(9232),
                            Email = "admin@loot.com",
                            FullName = "admin",
                            PasswordHash = "$2a$11$Rl27r4Rwfmg4o9.RrT78MuhEpku/8mZ2ZFXhazCbV9YNvo6PuGqOq",
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 225, DateTimeKind.Utc).AddTicks(1080),
                            Email = "user@loot.com",
                            FullName = "user",
                            PasswordHash = "$2a$11$VA.C912a7xUsKVgDoKSfy.tQbx2yQC27Ru2uFDig5sFWeacIZmtCa",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(3605),
                            Email = "contributor@loot.com",
                            FullName = "contributor",
                            PasswordHash = "$2a$11$jcNgyE6dX/YXOYXiKQgfwOILc96iZP4xXNkMh5cLrwLl02sJFev4i",
                            Role = 2
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Furniture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfShelves")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Furnitures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4601),
                            Indice = 1,
                            Name = "Admin Furniture",
                            NumberOfShelves = 1,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4603),
                            Indice = 1,
                            Name = "User Furniture",
                            NumberOfShelves = 1,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4604),
                            Indice = 1,
                            Name = "Cont Furniture",
                            NumberOfShelves = 1,
                            RoomId = 3
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Houses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4435),
                            Indice = 1,
                            Name = "Admin House",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4437),
                            Indice = 1,
                            Name = "User House",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4439),
                            Indice = 1,
                            Name = "Cont House",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FurnitureId")
                        .HasColumnType("int");

                    b.Property<int>("HouseId")
                        .HasColumnType("int");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FurnitureId");

                    b.HasIndex("HouseId");

                    b.HasIndex("PositionId")
                        .IsUnique()
                        .HasFilter("[PositionId] IS NOT NULL");

                    b.HasIndex("RoomId");

                    b.HasIndex("ShelfId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4771),
                            HouseId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4773),
                            HouseId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4774),
                            HouseId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4820),
                            HouseId = 1,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4821),
                            HouseId = 2,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4822),
                            HouseId = 3,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4843),
                            FurnitureId = 1,
                            HouseId = 1,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4844),
                            FurnitureId = 2,
                            HouseId = 2,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4846),
                            FurnitureId = 3,
                            HouseId = 3,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4859),
                            FurnitureId = 1,
                            HouseId = 1,
                            RoomId = 1,
                            ShelfId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4861),
                            FurnitureId = 2,
                            HouseId = 2,
                            RoomId = 2,
                            ShelfId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4862),
                            FurnitureId = 3,
                            HouseId = 3,
                            RoomId = 3,
                            ShelfId = 3
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4874),
                            FurnitureId = 1,
                            HouseId = 1,
                            PositionId = 1,
                            RoomId = 1,
                            ShelfId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4875),
                            FurnitureId = 2,
                            HouseId = 2,
                            PositionId = 2,
                            RoomId = 2,
                            ShelfId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4877),
                            FurnitureId = 3,
                            HouseId = 3,
                            PositionId = 3,
                            RoomId = 3,
                            ShelfId = 3
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShelfId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShelfId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4715),
                            Indice = 1,
                            Name = "Admin Position",
                            ShelfId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4717),
                            Indice = 1,
                            Name = "User Position",
                            ShelfId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4718),
                            Indice = 1,
                            Name = "Cont Position",
                            ShelfId = 3
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HouseId")
                        .HasColumnType("int");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HouseId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4537),
                            HouseId = 1,
                            Indice = 1,
                            Name = "Admin Room"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4539),
                            HouseId = 2,
                            Indice = 1,
                            Name = "User Room"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4540),
                            HouseId = 3,
                            Indice = 1,
                            Name = "Cont Room"
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Shelf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FurnitureId")
                        .HasColumnType("int");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPositions")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FurnitureId");

                    b.ToTable("Shelves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4662),
                            FurnitureId = 1,
                            Indice = 1,
                            Name = "Admin Shelf",
                            NumberOfPositions = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4664),
                            FurnitureId = 2,
                            Indice = 1,
                            Name = "User Shelf",
                            NumberOfPositions = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 4, 21, 9, 56, 29, 405, DateTimeKind.Utc).AddTicks(4665),
                            FurnitureId = 3,
                            Indice = 1,
                            Name = "Cont Shelf",
                            NumberOfPositions = 1
                        });
                });

            modelBuilder.Entity("ElementImage", b =>
                {
                    b.HasOne("LootManagerApi.Entities.Element", null)
                        .WithMany()
                        .HasForeignKey("ElementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LootManagerApi.Entities.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageInfoSheet", b =>
                {
                    b.HasOne("LootManagerApi.Entities.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LootManagerApi.Entities.InfoSheet", null)
                        .WithMany()
                        .HasForeignKey("InfoSheetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LootManagerApi.Entities.Element", b =>
                {
                    b.HasOne("LootManagerApi.Entities.InfoSheet", "InfoSheet")
                        .WithMany("Elements")
                        .HasForeignKey("InfoSheetId");

                    b.HasOne("LootManagerApi.Entities.logistics.Location", "Location")
                        .WithMany("Elements")
                        .HasForeignKey("LocationId");

                    b.HasOne("LootManagerApi.Entities.User", "User")
                        .WithMany("Elements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InfoSheet");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootManagerApi.Entities.InfoSheet", b =>
                {
                    b.HasOne("LootManagerApi.Entities.User", "User")
                        .WithMany("InfoSheets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Furniture", b =>
                {
                    b.HasOne("LootManagerApi.Entities.logistics.Room", "Room")
                        .WithMany("Furnitures")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.House", b =>
                {
                    b.HasOne("LootManagerApi.Entities.User", "User")
                        .WithMany("Houses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Location", b =>
                {
                    b.HasOne("LootManagerApi.Entities.logistics.Furniture", "Furniture")
                        .WithMany("Locations")
                        .HasForeignKey("FurnitureId");

                    b.HasOne("LootManagerApi.Entities.logistics.House", "House")
                        .WithMany("Locations")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LootManagerApi.Entities.logistics.Position", "Position")
                        .WithOne("Location")
                        .HasForeignKey("LootManagerApi.Entities.logistics.Location", "PositionId");

                    b.HasOne("LootManagerApi.Entities.logistics.Room", "Room")
                        .WithMany("Locations")
                        .HasForeignKey("RoomId");

                    b.HasOne("LootManagerApi.Entities.logistics.Shelf", "Shelf")
                        .WithMany("Locations")
                        .HasForeignKey("ShelfId");

                    b.Navigation("Furniture");

                    b.Navigation("House");

                    b.Navigation("Position");

                    b.Navigation("Room");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Position", b =>
                {
                    b.HasOne("LootManagerApi.Entities.logistics.Shelf", null)
                        .WithMany("Positions")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Room", b =>
                {
                    b.HasOne("LootManagerApi.Entities.logistics.House", "House")
                        .WithMany("Room")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Shelf", b =>
                {
                    b.HasOne("LootManagerApi.Entities.logistics.Furniture", "Furniture")
                        .WithMany("Shelves")
                        .HasForeignKey("FurnitureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Furniture");
                });

            modelBuilder.Entity("LootManagerApi.Entities.InfoSheet", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("LootManagerApi.Entities.User", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("Houses");

                    b.Navigation("InfoSheets");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Furniture", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Shelves");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.House", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Location", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Position", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Room", b =>
                {
                    b.Navigation("Furnitures");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Shelf", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
