// <auto-generated />
using System;
using LootManagerApi.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LootManagerApi.Migrations
{
    [DbContext(typeof(LootManagerContext))]
    [Migration("20230503123347_DebugNumberOfPositions")]
    partial class DebugNumberOfPositions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ElementImage", b =>
                {
                    b.Property<int>("ElementsId")
                        .HasColumnType("int");

                    b.Property<int>("ImagesId")
                        .HasColumnType("int");

                    b.HasKey("ElementsId", "ImagesId");

                    b.HasIndex("ImagesId");

                    b.ToTable("ElementImage");
                });

            modelBuilder.Entity("ImageInfoSheet", b =>
                {
                    b.Property<int>("ImagesId")
                        .HasColumnType("int");

                    b.Property<int>("InfoSheetsId")
                        .HasColumnType("int");

                    b.HasKey("ImagesId", "InfoSheetsId");

                    b.HasIndex("InfoSheetsId");

                    b.ToTable("ImageInfoSheet");
                });

            modelBuilder.Entity("LootManagerApi.Entities.Element", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InfoSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InfoSheetId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Elements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 516, DateTimeKind.Utc).AddTicks(95),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 1,
                            LocationId = 1,
                            Name = "Admin Fig",
                            Type = "Figurine",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 516, DateTimeKind.Utc).AddTicks(98),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 1,
                            LocationId = 2,
                            Name = "User Fig",
                            Type = "Figurine",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 516, DateTimeKind.Utc).AddTicks(99),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 1,
                            LocationId = 3,
                            Name = "Cont Fig",
                            Type = "Figurine",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 516, DateTimeKind.Utc).AddTicks(101),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 2,
                            LocationId = 1,
                            Name = "Admin Manga",
                            Type = "Manga",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 516, DateTimeKind.Utc).AddTicks(103),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 2,
                            LocationId = 2,
                            Name = "User Manga",
                            Type = "Manga",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 516, DateTimeKind.Utc).AddTicks(104),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 2,
                            LocationId = 3,
                            Name = "Cont Manga3",
                            Type = "Manga",
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 516, DateTimeKind.Utc).AddTicks(106),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 3,
                            LocationId = 1,
                            Name = "Admin Comic",
                            Type = "Comic",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 516, DateTimeKind.Utc).AddTicks(109),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 3,
                            LocationId = 2,
                            Name = "User Comic",
                            Type = "Comic",
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 516, DateTimeKind.Utc).AddTicks(110),
                            Description = "Description of the element",
                            Grade = "An excellent condition.",
                            InfoSheetId = 3,
                            LocationId = 3,
                            Name = "Cont Comic",
                            Type = "Comic",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("LootManagerApi.Entities.InfoSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WikiArticle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("InfoSheets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorSignature = "The Contributor",
                            BarCode = "3 037920 02133 1",
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 516, DateTimeKind.Utc).AddTicks(18),
                            Designation = "Figurine",
                            Reference = "Fig-ref_01",
                            UserId = 3,
                            WikiArticle = "Small statue depicting a popular culture character."
                        },
                        new
                        {
                            Id = 2,
                            AuthorSignature = "The Contributor",
                            BarCode = "3 037920 02133 1",
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 516, DateTimeKind.Utc).AddTicks(23),
                            Designation = "Manga",
                            Reference = "Man-ref_01",
                            UserId = 3,
                            WikiArticle = "Japanese comic book."
                        },
                        new
                        {
                            Id = 3,
                            AuthorSignature = "The Contributor",
                            BarCode = "3 037920 02133 1",
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 516, DateTimeKind.Utc).AddTicks(24),
                            Designation = "Comic",
                            Reference = "Com-ref_01",
                            UserId = 3,
                            WikiArticle = "Illustrated story in a book or magazine format, often featuring superheroes or humor."
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 164, DateTimeKind.Utc).AddTicks(5431),
                            Email = "admin@loot.com",
                            FullName = "admin",
                            PasswordHash = "$2a$11$rgMKgG8tnqA4K4nTurXMrOpZgO9fnb5.YGE1OKj50mjp0hGvsm65S",
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 343, DateTimeKind.Utc).AddTicks(1641),
                            Email = "user@loot.com",
                            FullName = "user",
                            PasswordHash = "$2a$11$Cf1.gRAVk6/oU43pJvQQSeMoc1RTQVMj2C2wXUgI8sA6Q.kIEc88O",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(8888),
                            Email = "contributor@loot.com",
                            FullName = "contributor",
                            PasswordHash = "$2a$11$DZTUdOm6Kb6bVP3Yv5ex/OtnJY.fwyHDpNcfCWJ3U190X3Ji08FXq",
                            Role = 2
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.DefaultLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("DefaultLocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocationId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            LocationId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            LocationId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Furniture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfShelves")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Furnitures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9510),
                            Indice = 1,
                            LocationId = 7,
                            Name = "Admin Furniture",
                            NumberOfShelves = 1,
                            RoomId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9512),
                            Indice = 1,
                            LocationId = 8,
                            Name = "User Furniture",
                            NumberOfShelves = 1,
                            RoomId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9514),
                            Indice = 1,
                            LocationId = 9,
                            Name = "Cont Furniture",
                            NumberOfShelves = 1,
                            RoomId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Houses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9413),
                            Indice = 1,
                            LocationId = 1,
                            Name = "Admin's Main House",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9416),
                            Indice = 1,
                            LocationId = 2,
                            Name = "User's Main House",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9417),
                            Indice = 1,
                            LocationId = 3,
                            Name = "Cont's Main House",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9300),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9302),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9303),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9364),
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9365),
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9366),
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9383),
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9384),
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9385),
                            UserId = 3
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9395),
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9396),
                            UserId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9396),
                            UserId = 3
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9404),
                            UserId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9404),
                            UserId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9405),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShelfId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.HasIndex("ShelfId");

                    b.HasIndex("UserId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9833),
                            Indice = 1,
                            LocationId = 13,
                            Name = "Admin Position",
                            ShelfId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9836),
                            Indice = 1,
                            LocationId = 14,
                            Name = "User Position",
                            ShelfId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9837),
                            Indice = 1,
                            LocationId = 15,
                            Name = "Cont Position",
                            ShelfId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HouseId")
                        .HasColumnType("int");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HouseId");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9458),
                            HouseId = 1,
                            Indice = 1,
                            LocationId = 4,
                            Name = "Admin Room",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9460),
                            HouseId = 2,
                            Indice = 1,
                            LocationId = 5,
                            Name = "User Room",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9462),
                            HouseId = 3,
                            Indice = 1,
                            LocationId = 6,
                            Name = "Cont Room",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Shelf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FurnitureId")
                        .HasColumnType("int");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FurnitureId");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Shelves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9729),
                            FurnitureId = 1,
                            Indice = 1,
                            LocationId = 10,
                            Name = "Admin Shelf",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9732),
                            FurnitureId = 2,
                            Indice = 2,
                            LocationId = 11,
                            Name = "User Shelf",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 5, 3, 12, 33, 47, 515, DateTimeKind.Utc).AddTicks(9733),
                            FurnitureId = 3,
                            Indice = 3,
                            LocationId = 12,
                            Name = "Cont Shelf",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("ElementImage", b =>
                {
                    b.HasOne("LootManagerApi.Entities.Element", null)
                        .WithMany()
                        .HasForeignKey("ElementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LootManagerApi.Entities.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageInfoSheet", b =>
                {
                    b.HasOne("LootManagerApi.Entities.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LootManagerApi.Entities.InfoSheet", null)
                        .WithMany()
                        .HasForeignKey("InfoSheetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LootManagerApi.Entities.Element", b =>
                {
                    b.HasOne("LootManagerApi.Entities.InfoSheet", "InfoSheet")
                        .WithMany("Elements")
                        .HasForeignKey("InfoSheetId");

                    b.HasOne("LootManagerApi.Entities.logistics.Location", "Location")
                        .WithMany("Elements")
                        .HasForeignKey("LocationId");

                    b.HasOne("LootManagerApi.Entities.User", "User")
                        .WithMany("Elements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InfoSheet");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootManagerApi.Entities.InfoSheet", b =>
                {
                    b.HasOne("LootManagerApi.Entities.User", "User")
                        .WithMany("InfoSheets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.DefaultLocation", b =>
                {
                    b.HasOne("LootManagerApi.Entities.logistics.Location", "Location")
                        .WithOne("DefaultLocation")
                        .HasForeignKey("LootManagerApi.Entities.logistics.DefaultLocation", "LocationId");

                    b.HasOne("LootManagerApi.Entities.User", "User")
                        .WithOne("DefaultLocation")
                        .HasForeignKey("LootManagerApi.Entities.logistics.DefaultLocation", "UserId");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Furniture", b =>
                {
                    b.HasOne("LootManagerApi.Entities.logistics.Location", "Location")
                        .WithOne("Furniture")
                        .HasForeignKey("LootManagerApi.Entities.logistics.Furniture", "LocationId");

                    b.HasOne("LootManagerApi.Entities.logistics.Room", "Room")
                        .WithMany("Furnitures")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LootManagerApi.Entities.User", "User")
                        .WithMany("Furnitures")
                        .HasForeignKey("UserId");

                    b.Navigation("Location");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.House", b =>
                {
                    b.HasOne("LootManagerApi.Entities.logistics.Location", "Location")
                        .WithOne("House")
                        .HasForeignKey("LootManagerApi.Entities.logistics.House", "LocationId");

                    b.HasOne("LootManagerApi.Entities.User", "User")
                        .WithMany("Houses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Location", b =>
                {
                    b.HasOne("LootManagerApi.Entities.User", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Position", b =>
                {
                    b.HasOne("LootManagerApi.Entities.logistics.Location", "Location")
                        .WithOne("Position")
                        .HasForeignKey("LootManagerApi.Entities.logistics.Position", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LootManagerApi.Entities.logistics.Shelf", null)
                        .WithMany("Positions")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LootManagerApi.Entities.User", "User")
                        .WithMany("Positions")
                        .HasForeignKey("UserId");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Room", b =>
                {
                    b.HasOne("LootManagerApi.Entities.logistics.House", "House")
                        .WithMany("Rooms")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LootManagerApi.Entities.logistics.Location", "Location")
                        .WithOne("Room")
                        .HasForeignKey("LootManagerApi.Entities.logistics.Room", "LocationId");

                    b.HasOne("LootManagerApi.Entities.User", "User")
                        .WithMany("Rooms")
                        .HasForeignKey("UserId");

                    b.Navigation("House");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Shelf", b =>
                {
                    b.HasOne("LootManagerApi.Entities.logistics.Furniture", "Furniture")
                        .WithMany("Shelves")
                        .HasForeignKey("FurnitureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LootManagerApi.Entities.logistics.Location", "Location")
                        .WithOne("Shelf")
                        .HasForeignKey("LootManagerApi.Entities.logistics.Shelf", "LocationId");

                    b.HasOne("LootManagerApi.Entities.User", "User")
                        .WithMany("Shelves")
                        .HasForeignKey("UserId");

                    b.Navigation("Furniture");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootManagerApi.Entities.InfoSheet", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("LootManagerApi.Entities.User", b =>
                {
                    b.Navigation("DefaultLocation");

                    b.Navigation("Elements");

                    b.Navigation("Furnitures");

                    b.Navigation("Houses");

                    b.Navigation("InfoSheets");

                    b.Navigation("Locations");

                    b.Navigation("Positions");

                    b.Navigation("Rooms");

                    b.Navigation("Shelves");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Furniture", b =>
                {
                    b.Navigation("Shelves");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.House", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Location", b =>
                {
                    b.Navigation("DefaultLocation");

                    b.Navigation("Elements");

                    b.Navigation("Furniture");

                    b.Navigation("House");

                    b.Navigation("Position");

                    b.Navigation("Room");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Room", b =>
                {
                    b.Navigation("Furnitures");
                });

            modelBuilder.Entity("LootManagerApi.Entities.logistics.Shelf", b =>
                {
                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
